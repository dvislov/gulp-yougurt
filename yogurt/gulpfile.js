// Generated by CoffeeScript 1.8.0
var config, connect, fs, gulp, plugins, spritesmith, streamqueue, yaml;

fs = require('fs');

streamqueue = require('streamqueue');

gulp = require('gulp');

yaml = require('js-yaml');

connect = require('gulp-connect-multi')();

plugins = require('gulp-load-plugins')();

config = yaml.load(fs.readFileSync("config.yml", "utf8"));

gulp.task('connect', connect.server({
  root: [config.webserver.root_path],
  port: config.webserver.port,
  livereload: true,
  open: {
    browser: 'Google Chrome'
  }
}));

gulp.task('jade', function() {
  return gulp.src(config.paths.jade.src).pipe(plugins.plumber()).pipe(plugins.jade({
    pretty: true
  })).pipe(plugins.duration('jade templates compile')).pipe(gulp.dest(config.paths.jade.develop_compile)).pipe(connect.reload());
});

gulp.task('stylus', function() {
  return streamqueue({
    objectMode: true
  }, gulp.src(config.paths.vendor.css.src), gulp.src(config.paths.stylus.src).pipe(plugins.stylus()).pipe(plugins.autoprefixer())).pipe(plugins.duration('stylus compilation')).pipe(plugins.plumber()).pipe(plugins.concat('application.css')).pipe(gulp.dest(config.paths.stylus.develop_compile)).pipe(connect.reload());
});

spritesmith = require('gulp.spritesmith');

gulp.task('sprite', function() {
  var spriteData;
  spriteData = gulp.src(config.paths.sprite.src).pipe(plugins.plumber()).pipe(plugins.duration('sprite develop compilation')).pipe(plugins.plumber()).pipe(spritesmith({
    imgName: 'sprite.png',
    cssName: 'sprite.styl',
    imgPath: '../images/sprite.png',
    cssFormat: 'stylus',
    padding: 10,
    algorithm: 'binary-tree'
  }));
  spriteData.img.pipe(plugins.plumber()).pipe(plugins.duration('sprite images compilation')).pipe(gulp.dest(config.paths.sprite.develop_compile_images)).pipe(plugins.connect.reload());
  return spriteData.css.pipe(plugins.plumber()).pipe(plugins.duration('sprite styles compilation')).pipe(gulp.dest(config.paths.sprite.develop_compile_styles)).pipe(plugins.connect.reload());
});

gulp.task('coffee', function() {
  return gulp.src(config.paths.coffee.src).pipe(plugins.coffee()).pipe(plugins.plumber()).pipe(plugins.duration('coffeescript compilation')).pipe(gulp.dest(config.paths.coffee.dest)).pipe(plugins.connect.reload());
});

gulp.task('fonts-assets', function() {
  return gulp.src(config.paths.fonts.src).pipe(plugins.syncFiles({
    name: 'fonts',
    src: config.paths.fonts.src,
    dest: config.paths.fonts.dest
  })).pipe(plugins.plumber()).pipe(plugins.duration('Fonts assets sync')).pipe(gulp.dest(config.paths.fonts.dest));
});

gulp.task('images-assets', function() {
  return gulp.src(config.paths.images.src).pipe(plugins.syncFiles({
    name: 'images',
    src: config.paths.images.src,
    dest: config.paths.images.dest
  })).pipe(plugins.plumber()).pipe(plugins.duration('Images assets sync')).pipe(gulp.dest(config.paths.images.dest));
});

gulp.task('watch', function() {
  gulp.watch(config.paths.jade.src, ['jade']);
  gulp.watch(config.paths.jade.src_shared, ['jade']);
  gulp.watch(config.paths.stylus.base, ['stylus']);
  gulp.watch(config.paths.sprite.src, ['sprite', 'stylus']);
  gulp.watch(config.paths.vendor.css.src, ['stylus']);
  gulp.watch(config.paths.coffee.watch, ['coffee']);
  gulp.watch(config.paths.fonts.src, ['fonts-assets']);
  gulp.watch(config.paths.images.src, ['images-assets']);
});

gulp.task('default', ['connect', 'watch']);
